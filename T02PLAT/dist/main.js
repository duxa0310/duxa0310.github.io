!function(){"use strict";const t=(Math.sqrt(5)+1)/2,n=(Math.sqrt(5)-1)/2;function r(t){return 180*t/Math.PI}function e(t){return t*Math.PI/180}function a(t,n,r){return[t,n,r]}function o(t){return[t,t,t]}function l(t,n){return a(t[0]-n[0],t[1]-n[1],t[2]-n[2])}function i(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function c(t,n){return a(t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0])}function g(t){let n=i(t,t);return 0==n?o(0):function(t,n){return a(t[0]/n,t[1]/n,t[2]/n)}(t,Math.pow(n,.5))}function u(t,n,r,e,a,o,l,i,c,g,u,m,s,f,d,w){return[[t,n,r,e],[a,o,l,i],[c,g,u,m],[s,f,d,w]]}function m(){return u(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)}function s(t,n){return u(t[0][0]*n[0][0]+t[0][1]*n[1][0]+t[0][2]*n[2][0]+t[0][3]*n[3][0],t[0][0]*n[0][1]+t[0][1]*n[1][1]+t[0][2]*n[2][1]+t[0][3]*n[3][1],t[0][0]*n[0][2]+t[0][1]*n[1][2]+t[0][2]*n[2][2]+t[0][3]*n[3][2],t[0][0]*n[0][3]+t[0][1]*n[1][3]+t[0][2]*n[2][3]+t[0][3]*n[3][3],t[1][0]*n[0][0]+t[1][1]*n[1][0]+t[1][2]*n[2][0]+t[1][3]*n[3][0],t[1][0]*n[0][1]+t[1][1]*n[1][1]+t[1][2]*n[2][1]+t[1][3]*n[3][1],t[1][0]*n[0][2]+t[1][1]*n[1][2]+t[1][2]*n[2][2]+t[1][3]*n[3][2],t[1][0]*n[0][3]+t[1][1]*n[1][3]+t[1][2]*n[2][3]+t[1][3]*n[3][3],t[2][0]*n[0][0]+t[2][1]*n[1][0]+t[2][2]*n[2][0]+t[2][3]*n[3][0],t[2][0]*n[0][1]+t[2][1]*n[1][1]+t[2][2]*n[2][1]+t[2][3]*n[3][1],t[2][0]*n[0][2]+t[2][1]*n[1][2]+t[2][2]*n[2][2]+t[2][3]*n[3][2],t[2][0]*n[0][3]+t[2][1]*n[1][3]+t[2][2]*n[2][3]+t[2][3]*n[3][3],t[3][0]*n[0][0]+t[3][1]*n[1][0]+t[3][2]*n[2][0]+t[3][3]*n[3][0],t[3][0]*n[0][1]+t[3][1]*n[1][1]+t[3][2]*n[2][1]+t[3][3]*n[3][1],t[3][0]*n[0][2]+t[3][1]*n[1][2]+t[3][2]*n[2][2]+t[3][3]*n[3][2],t[3][0]*n[0][3]+t[3][1]*n[1][3]+t[3][2]*n[2][3]+t[3][3]*n[3][3])}function f(t,n,r){let e=g(l(n,t)),a=g(c(e,r)),o=g(c(a,e));return u(a[0],o[0],-e[0],0,a[1],o[1],-e[1],0,a[2],o[2],-e[2],0,-i(t,a),-i(t,o),i(t,e),1)}function d(t){return u(1,0,0,0,0,1,0,0,0,0,1,0,t[0],t[1],t[2],1)}let w=[];class A{constructor(t){this.name=t,this.program=function(t){let n=gl.createProgram();const r=[["vert",gl.VERTEX_SHADER,"#version 300 es\nprecision highp float;\n#define VERTEX_SHADER 1\n"],["frag",gl.FRAGMENT_SHADER,"#version 300 es\nprecision highp float;\n#define FRAGMENT_SHADER 1\n"]];for(let a=0;a<r.length;a++){let o="bin/shaders/"+t+"/"+r[a][0]+".glsl",l="bin/shaders/default/vert.glsl"==(e=o)?"layout(location = 0) in vec3 InPosition;\n            layout(location = 1) in vec2 InTexCoord;\n            layout(location = 2) in vec3 InNormal;\n            layout(location = 3) in vec4 InColor;\n\n            out vec3 DrawPos;\n            out vec2 DrawTexCoord;\n            out vec3 DrawNormal;\n            out vec4 DrawColor;\n\n            uniform mat4 MatrWVP;\n            uniform mat4 MatrW;\n\n            void main( void ) \n            {\n              gl_Position = MatrWVP * vec4(InPosition, 1);\n              mat4 MatrWInv = inverse(transpose(MatrW));\n\n              DrawPos = (MatrW * vec4(InPosition, 1.0)).xyz;\n              DrawTexCoord = InTexCoord;\n              DrawNormal = mat3(MatrWInv) * InNormal;\n              DrawColor = vec4(InColor);\n            }":"bin/shaders/default/frag.glsl"==e?"layout(location = 0) out vec4 OutColor;\n            in vec3 DrawPos;\n            in vec2 DrawTexCoord;\n            in vec3 DrawNormal;\n            in vec4 DrawColor;\n\n            uniform vec3 CamDir;\n\n            void main()\n            {\n              float nl = max(0.30, dot(normalize(DrawNormal), -CamDir));\n\n              OutColor = vec4(DrawColor.xyz * nl, DrawColor.w);\n            }":void 0;l=r[a][2]+l;const i=gl.createShader(r[a][1]);gl.shaderSource(i,l),gl.compileShader(i),gl.getShaderParameter(i,gl.COMPILE_STATUS)?outText("Loaded shader: "+o):alert(gl.getShaderInfoLog(i)),gl.attachShader(n,i)}var e;return gl.linkProgram(n),gl.getProgramParameter(n,gl.LINK_STATUS)?outText("Created shader pack: "+t):alert("Program linkage error"),n}(t),w.push(this)}}function h(){new A("default"),outSys("Shaders initialized"),outSys("Buffers initialized")}function v(t,n,r){gl.camLoc=t,gl.camAt=n,gl.matrView=f(t,n,r),gl.camRight=a(gl.matrView[0][0],gl.matrView[1][0],gl.matrView[2][0]),gl.camUp=a(gl.matrView[0][1],gl.matrView[1][1],gl.matrView[2][1]),gl.camDir=a(-gl.matrView[0][2],-gl.matrView[1][2],-gl.matrView[2][2])}function E(){let t,n;var r,e,a,o,l,i;t=n=gl.projSize,gl.frameW=document.documentElement.clientWidth,gl.frameH=document.documentElement.clientHeight,gl.frameW>=gl.frameH?t*=gl.frameW/gl.frameH:n*=gl.frameH/gl.frameW,gl.matrProj=(r=-t/2,e=t/2,a=-n/2,o=n/2,l=gl.projDist,i=gl.farClip,u(2*l/(e-r),0,0,0,0,2*l/(o-a),0,0,(e+r)/(e-r),(o+a)/(o-a),-(i+l)/(i-l),-1,0,0,-2*l*i/(i-l),0)),gl.matrVP=s(gl.matrView,gl.matrProj),gl.viewportWidth=gl.frameW,gl.viewportHeight=gl.frameH}function S(t,n,r,e){return t.concat(n,r,e)}function R(t){return[].concat([t[0],t[1],t[2]],[t[2],t[0],t[3]],[t[3],t[4],t[0]])}function T(t,n,r){return new P(t,n,r)}class P{constructor(t,n,r){this.type=t,n.length>0&&(this.vBuf=gl.createBuffer(),this.vA=gl.createVertexArray(),gl.bindVertexArray(this.vA),gl.bindBuffer(gl.ARRAY_BUFFER,this.vBuf),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(n),gl.STATIC_DRAW),gl.bindBuffer(gl.ARRAY_BUFFER,this.vBuf),gl.enableVertexAttribArray(0),gl.enableVertexAttribArray(1),gl.enableVertexAttribArray(2),gl.enableVertexAttribArray(3),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,48,0),gl.vertexAttribPointer(1,2,gl.FLOAT,!1,48,12),gl.vertexAttribPointer(2,3,gl.FLOAT,!1,48,20),gl.vertexAttribPointer(3,4,gl.FLOAT,!1,48,32)),r.length>0?(this.iBuf=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.iBuf),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Int32Array(r),gl.STATIC_DRAW),this.numOfElements=r.length):this.numOfElements=n.length,outText("Created primitive: "+new String(4*n.length/48)+" vertices, "+new String(r.length)+" indices")}draw(t){let n=w[0];gl.useProgram(n.program),gl.uniform3fv(gl.getUniformLocation(n.program,"CamDir"),new Float32Array(gl.camDir),0,0),gl.uniformMatrix4fv(gl.getUniformLocation(n.program,"MatrW"),!1,new Float32Array(t[0].concat(t[1]).concat(t[2]).concat(t[3]))),gl.matrWVP=s(t,gl.matrVP),gl.uniformMatrix4fv(gl.getUniformLocation(n.program,"MatrWVP"),!1,new Float32Array(gl.matrWVP[0].concat(gl.matrWVP[1]).concat(gl.matrWVP[2]).concat(gl.matrWVP[3]))),gl.bindVertexArray(this.vA),null==this.iBuf?gl.drawArrays(this.type,0,this.numOfElements):(gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.iBuf),gl.drawElements(this.type,this.numOfElements,gl.UNSIGNED_INT,0))}}let b,y,L,D,V,p,C;function I(){gl.clearColor(.3,.47,.8,1),gl.viewport(0,0,1920,1080),gl.clear(gl.COLOR_BUFFER_BIT),gl.matrView=f(gl.camLoc,gl.camAt,gl.camUp),gl.matrVP=s(gl.matrView,gl.matrProj),y.draw(m()),L.draw(d(a(0,3,0))),D.draw(d(a(0,-3,0))),V.draw(d(a(-1.8,0,1.8))),p.draw(d(a(3,0,-3))),C.draw(m()),window.requestAnimationFrame(I)}window.onload=function(){window.outSys=function(t){console.log("%c[SYS]","background: #000000; color: #00ff00",t)},window.outLog=function(t){console.log("%c[LOG]","background: #000000; color: #00ffff",t)},window.outText=function(t){console.log(" :::: "+t)},document.onkeydown=()=>{!function(t,n){const c=String.fromCharCode(n);t.altKey,t.ctrlKey;const g=t.shiftKey;if(g&&"F"==c)return void v(o(8),o(0),a(0,1,0));let m=function(t){let n=i(t,t);return Math.pow(n,.5)}(l(gl.camAt,gl.camLoc));const f=(gl.camLoc[1]-gl.camAt[1])/m,w=Math.pow(1-f*f,.5),A=m*w,h=(gl.camLoc[2]-gl.camAt[2])/A,E=(gl.camLoc[0]-gl.camAt[0])/A;let S=r(Math.atan2(E,h)),R=r(Math.atan2(w,f));const T=.47+g,P=8+10*g;switch(c){case"Q":m+=T;break;case"E":m-=T;break;case"A":S-=P;break;case"D":S+=P;break;case"W":R+=P;break;case"S":R-=P}R<.08?R=.08:R>178.9&&(R=178.9);m<.1&&(m=.1);v((b=a(0,m,0),L=function(t){const n=Math.sin(e(t)),r=Math.cos(e(t));return u(1,0,0,0,0,r,n,0,0,-n,r,0,0,0,0,1)}(R),D=function(t){const n=Math.sin(e(t)),r=Math.cos(e(t));return u(r,0,-n,0,0,1,0,0,n,-0,r,0,0,0,0,1)}(S),V=d(gl.camAt),y=s(s(L,D),V),a(b[0]*y[0][0]+b[1]*y[1][0]+b[2]*y[2][0]+y[3][0],b[0]*y[0][1]+b[1]*y[1][1]+b[2]*y[2][1]+y[3][1],b[0]*y[0][2]+b[1]*y[1][2]+b[2]*y[2][2]+y[3][2])),gl.camAt,a(0,1,0));var b,y;var L,D,V}(window.event,window.event.which)},window.onresize=()=>{console.log(document.documentElement.clientWidth,document.documentElement.clientHeight),E()},outLog("System start..."),window.canvas=document.getElementById("webgl-canvas"),window.gl=canvas.getContext("webgl2",{antialias:!1}),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),gl.enable(gl.DEPTH_TEST),gl.projSize=.1,gl.projDist=gl.projSize,gl.farClip=1847,h(),v(o(8),o(0),a(0,1,0)),E(),outSys("Render system initialized"),b=T(gl.TRIANGLES,[].concat(S([0,1,0],[0,0],[0,0,0],[.96,.95,.41,1]),S([1,0,0],[0,0],[0,0,0],[.36,.7,.44,1]),S([0,0,1],[0,0],[0,0,0],[.78,.98,.84,1])),[]),y=T(gl.LINES,[].concat(S([0,0,0],[0,0],[0,0,0],[1,0,0,1]),S([1e3,0,0],[0,0],[0,0,0],[1,0,0,1]),S([0,0,0],[0,0],[0,0,0],[0,1,0,1]),S([0,1e3,0],[0,0],[0,0,0],[0,1,0,1]),S([0,0,0],[0,0],[0,0,0],[0,0,1,1]),S([0,0,1e3],[0,0],[0,0,0],[0,0,1,1])),[]),L=T(gl.TRIANGLES,[].concat(S([1,1,1],[0,0],[1,1,1],[1,0,0,1]),S([-1,1,-1],[0,0],[-1,1,-1],[1,0,0,1]),S([1,-1,-1],[0,0],[1,-1,-1],[1,0,0,1]),S([-1,-1,1],[0,0],[-1,-1,1],[1,0,0,1])),[].concat([0,1,2],[2,0,3],[3,0,1],[1,2,3])),D=T(gl.TRIANGLES,[].concat(S([-1,-1,-1],[0,0],[-1,-1,-1],[1,0,0,1]),S([-1,-1,1],[0,0],[-1,-1,1],[1,.25,0,1]),S([-1,1,-1],[0,0],[-1,1,-1],[1,.5,0,1]),S([-1,1,1],[0,0],[-1,1,1],[1,.75,0,1]),S([1,-1,-1],[0,0],[1,-1,-1],[.75,1,0,1]),S([1,-1,1],[0,0],[1,-1,1],[.5,1,0,1]),S([1,1,-1],[0,0],[1,1,-1],[.25,1,0,1]),S([1,1,1],[0,0],[1,1,1],[0,1,0,1])),[].concat([0,2,3,3,0,1],[1,5,7,7,3,1],[1,5,4,4,1,0],[0,4,6,6,0,2],[2,3,6,6,3,7],[7,6,5,5,4,6])),V=T(gl.TRIANGLES,[].concat(S([0,1,0],[0,0],[0,1,0],[1,0,0,1]),S([0,0,-1],[0,0],[0,0,-1],[1,.5,0,1]),S([-1,0,0],[0,0],[-1,0,0],[1,1,0,1]),S([0,0,1],[0,0],[0,0,1],[.5,1,0,1]),S([1,0,0],[0,0],[1,0,0],[1,1,0,1]),S([0,-1,0],[0,0],[0,-1,0],[1,1,.5,1])),[].concat([1,0,2],[2,0,3],[3,0,4],[4,0,1],[1,5,4],[4,5,3],[3,5,2],[2,5,1])),p=T(gl.TRIANGLES,[].concat(S([-1,t,0],[0,0],[-1,t,0],[1,.25,0,1]),S([0,1,-t],[0,0],[0,1,-t],[1,.5,0,1]),S([1,t,0],[0,0],[1,t,0],[1,.75,0,1]),S([0,1,t],[0,0],[0,1,t],[1,1,0,1]),S([-t,0,1],[0,0],[-t,0,1],[.75,1,0,1]),S([-t,0,-1],[0,0],[-t,0,-1],[.5,1,0,1]),S([0,-1,-t],[0,0],[0,-1,-t],[.25,1,0,1]),S([t,0,-1],[0,0],[t,0,-1],[0,1,0,1]),S([t,0,1],[0,0],[t,0,1],[0,1,.25,1]),S([0,-1,t],[0,0],[0,-1,t],[0,1,.5,1]),S([-1,-t,0],[0,0],[-1,-t,0],[0,0,.75,1]),S([1,-t,0],[0,0],[1,-t,0],[0,1,1,1])),[].concat([0,1,2],[0,2,3],[0,3,4],[0,4,5],[0,5,1],[1,6,7],[7,1,2],[2,7,8],[8,2,3],[3,8,9],[9,3,4],[4,9,10],[10,4,5],[5,10,6],[6,5,1],[7,11,8],[8,11,9],[9,11,10],[10,11,6],[6,11,7])),C=T(gl.TRIANGLES,[].concat(S([n,t,0],[0,0],[n,t,0],[1,0,0,1]),S([-n,t,0],[0,0],[-n,t,0],[1,0,0,1]),S([-1,1,-1],[0,0],[-1,1,-1],[1,0,0,1]),S([0,n,-t],[0,0],[0,n,-t],[1,0,0,1]),S([1,1,-1],[0,0],[1,1,-1],[1,0,0,1]),S([1,1,1],[0,0],[1,1,1],[1,1,0,1]),S([0,n,t],[0,0],[0,n,t],[1,1,0,1]),S([-1,1,1],[0,0],[-1,1,1],[1,1,0,1]),S([-t,0,n],[0,0],[-t,0,n],[1,1,0,1]),S([-t,0,-n],[0,0],[-t,0,-n],[1,1,0,1]),S([-1,-1,-1],[0,0],[-1,-1,-1],[0,1,0,1]),S([0,-n,-t],[0,0],[0,-n,-t],[0,1,0,1]),S([1,-1,-1],[0,0],[1,-1,-1],[0,1,0,1]),S([t,0,-n],[0,0],[t,0,-n],[0,1,0,1]),S([t,0,n],[0,0],[t,0,n],[0,1,0,1]),S([1,-1,1],[0,0],[1,-1,1],[0,0,1,1]),S([n,-t,0],[0,0],[n,-t,0],[0,0,1,1]),S([-n,-t,0],[0,0],[-n,-t,0],[0,0,1,1]),S([-1,-1,1],[0,0],[-1,-1,1],[0,0,1,1]),S([0,-n,t],[0,0],[0,-n,t],[0,0,1,1])),[].concat(R([0,1,2,3,4]),R([0,5,6,7,1]),R([1,7,8,9,2]),R([2,9,10,11,3]),R([3,11,12,13,4]),R([0,4,13,14,5]),R([6,5,14,15,19]),R([8,7,6,19,18]),R([18,17,10,9,8]),R([12,11,10,17,16]),R([16,17,18,19,15]),R([16,15,14,13,12]))),outLog("Render start..."),I()}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
