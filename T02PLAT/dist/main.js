!function(){"use strict";const t=(Math.sqrt(5)+1)/2,n=(Math.sqrt(5)-1)/2;function e(t){return 180*t/Math.PI}function r(t){return t*Math.PI/180}function a(t,n,e){return[t,n,e]}function i(t){return[t,t,t]}function o(t,n){return a(t[0]-n[0],t[1]-n[1],t[2]-n[2])}function l(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function c(t,n){return a(t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0])}function g(t){let n=l(t,t);return 0==n?i(0):function(t,n){return a(t[0]/n,t[1]/n,t[2]/n)}(t,Math.pow(n,.5))}function s(t,n,e,r,a,i,o,l,c,g,s,h,u,m,f,d){return[[t,n,e,r],[a,i,o,l],[c,g,s,h],[u,m,f,d]]}function h(){return s(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)}function u(t,n){return s(t[0][0]*n[0][0]+t[0][1]*n[1][0]+t[0][2]*n[2][0]+t[0][3]*n[3][0],t[0][0]*n[0][1]+t[0][1]*n[1][1]+t[0][2]*n[2][1]+t[0][3]*n[3][1],t[0][0]*n[0][2]+t[0][1]*n[1][2]+t[0][2]*n[2][2]+t[0][3]*n[3][2],t[0][0]*n[0][3]+t[0][1]*n[1][3]+t[0][2]*n[2][3]+t[0][3]*n[3][3],t[1][0]*n[0][0]+t[1][1]*n[1][0]+t[1][2]*n[2][0]+t[1][3]*n[3][0],t[1][0]*n[0][1]+t[1][1]*n[1][1]+t[1][2]*n[2][1]+t[1][3]*n[3][1],t[1][0]*n[0][2]+t[1][1]*n[1][2]+t[1][2]*n[2][2]+t[1][3]*n[3][2],t[1][0]*n[0][3]+t[1][1]*n[1][3]+t[1][2]*n[2][3]+t[1][3]*n[3][3],t[2][0]*n[0][0]+t[2][1]*n[1][0]+t[2][2]*n[2][0]+t[2][3]*n[3][0],t[2][0]*n[0][1]+t[2][1]*n[1][1]+t[2][2]*n[2][1]+t[2][3]*n[3][1],t[2][0]*n[0][2]+t[2][1]*n[1][2]+t[2][2]*n[2][2]+t[2][3]*n[3][2],t[2][0]*n[0][3]+t[2][1]*n[1][3]+t[2][2]*n[2][3]+t[2][3]*n[3][3],t[3][0]*n[0][0]+t[3][1]*n[1][0]+t[3][2]*n[2][0]+t[3][3]*n[3][0],t[3][0]*n[0][1]+t[3][1]*n[1][1]+t[3][2]*n[2][1]+t[3][3]*n[3][1],t[3][0]*n[0][2]+t[3][1]*n[1][2]+t[3][2]*n[2][2]+t[3][3]*n[3][2],t[3][0]*n[0][3]+t[3][1]*n[1][3]+t[3][2]*n[2][3]+t[3][3]*n[3][3])}function m(t,n,e){let r=g(o(n,t)),a=g(c(r,e)),i=g(c(a,r));return s(a[0],i[0],-r[0],0,a[1],i[1],-r[1],0,a[2],i[2],-r[2],0,-l(t,a),-l(t,i),l(t,r),1)}function f(t){return s(1,0,0,0,0,1,0,0,0,0,1,0,t[0],t[1],t[2],1)}function d(t){const n=Math.sin(r(t)),e=Math.cos(r(t));return s(e,0,-n,0,0,1,0,0,n,-0,e,0,0,0,0,1)}async function w(t){return fetch(t).then((t=>t.text())).then((t=>t)).catch((t=>console.err(t)))}let A=[];class p{constructor(t){this.name=t}async init(){this.program=await async function(t){let n=gl.createProgram();const e=[["vert",gl.VERTEX_SHADER,"#version 300 es\nprecision highp float;\n#define VERTEX_SHADER 1\n"],["frag",gl.FRAGMENT_SHADER,"#version 300 es\nprecision highp float;\n#define FRAGMENT_SHADER 1\n"]];for(let r=0;r<e.length;r++){let a="bin/shaders/"+t+"/"+e[r][0]+".glsl",i=await w(a);i=e[r][2]+i;const o=gl.createShader(e[r][1]);gl.shaderSource(o,i),gl.compileShader(o),gl.getShaderParameter(o,gl.COMPILE_STATUS)?outText("Loaded shader: "+a):alert(gl.getShaderInfoLog(o)),gl.attachShader(n,o)}return gl.linkProgram(n),gl.getProgramParameter(n,gl.LINK_STATUS)?outText("Created shader pack: "+t):alert("Program linkage error"),n}(this.name),A.push(this)}}function E(){return A[0]}let y=[];class S{constructor(t,n,e,r,a,i,o){this.name=t,this.ka=n,this.kd=e,this.ks=r,this.ph=a,this.trans=i,this.shd=o,y.push(this),outText("Created material: "+t)}apply(){gl.useProgram(this.shd.program),gl.uniform3fv(gl.getUniformLocation(this.shd.program,"Ka"),new Float32Array(this.ka),0,0),gl.uniform4fv(gl.getUniformLocation(this.shd.program,"KdTrans"),new Float32Array(this.kd.concat(this.trans)),0,0),gl.uniform4fv(gl.getUniformLocation(this.shd.program,"KsPh"),new Float32Array(this.ks.concat(this.trans)),0,0)}}function L(){return y[0]}function R(){outSys("Materials initializing"),new S("default",a(.8,.47,.3),i(.5),i(.3),30,1,E()),new S("axis-material",i(.1),i(.9),i(.3),30,1,function(t){for(let n=1;n<A.length;n++)if(A[n].name==t)return A[n];return E()}("axis"))}async function T(){await async function(){outSys("Shaders initializing"),await new p("default").init(),await new p("axis").init()}(),R()}function v(t,n,e){gl.camLoc=t,gl.camAt=n,gl.matrView=m(t,n,e),gl.camRight=a(gl.matrView[0][0],gl.matrView[1][0],gl.matrView[2][0]),gl.camUp=a(gl.matrView[0][1],gl.matrView[1][1],gl.matrView[2][1]),gl.camDir=a(-gl.matrView[0][2],-gl.matrView[1][2],-gl.matrView[2][2])}function b(){let t,n;var e,r,a,i,o,l;t=n=gl.projSize,gl.frameW=document.documentElement.clientWidth,gl.frameH=document.documentElement.clientHeight,gl.frameW>=gl.frameH?t*=gl.frameW/gl.frameH:n*=gl.frameH/gl.frameW,gl.matrProj=(e=-t/2,r=t/2,a=-n/2,i=n/2,o=gl.projDist,l=gl.farClip,s(2*o/(r-e),0,0,0,0,2*o/(i-a),0,0,(r+e)/(r-e),(i+a)/(i-a),-(l+o)/(l-o),-1,0,0,-2*o*l/(l-o),0)),gl.matrVP=u(gl.matrView,gl.matrProj),gl.viewportWidth=gl.frameW,gl.viewportHeight=gl.frameH}const x=[];class F{constructor(){}init(){}response(){}render(){}}function P(t){outText("Unit created: "+t.name),x.push(t)}function V(t,n,e,r){return t.concat(n,e,r)}function _(t){return[].concat([t[0],t[1],t[2]],[t[2],t[0],t[3]],[t[3],t[4],t[0]])}function M(t,n,e,r){return new U(t,n,e,r)}class U{constructor(t,n,e,r){this.type=t,this.mtl=n,e.length>0&&(this.vBuf=gl.createBuffer(),this.vA=gl.createVertexArray(),gl.bindVertexArray(this.vA),gl.bindBuffer(gl.ARRAY_BUFFER,this.vBuf),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(e),gl.STATIC_DRAW),gl.bindBuffer(gl.ARRAY_BUFFER,this.vBuf),gl.enableVertexAttribArray(0),gl.enableVertexAttribArray(1),gl.enableVertexAttribArray(2),gl.enableVertexAttribArray(3),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,48,0),gl.vertexAttribPointer(1,2,gl.FLOAT,!1,48,12),gl.vertexAttribPointer(2,3,gl.FLOAT,!1,48,20),gl.vertexAttribPointer(3,4,gl.FLOAT,!1,48,32)),r.length>0?(this.iBuf=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.iBuf),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Int32Array(r),gl.STATIC_DRAW),this.numOfElements=r.length):this.numOfElements=e.length,outText("Created primitive: "+new String(4*e.length/48)+" vertices")}draw(t){this.mtl.apply(),gl.uniform3fv(gl.getUniformLocation(this.mtl.shd.program,"CamDir"),new Float32Array(gl.camDir),0,0),gl.uniform3fv(gl.getUniformLocation(this.mtl.shd.program,"CamLoc"),new Float32Array(gl.camLoc),0,0),gl.uniform3fv(gl.getUniformLocation(this.mtl.shd.program,"LightDir"),new Float32Array(gl.lightDir),0,0),gl.uniformMatrix4fv(gl.getUniformLocation(this.mtl.shd.program,"MatrW"),!1,new Float32Array(t[0].concat(t[1]).concat(t[2]).concat(t[3]))),gl.matrWVP=u(t,gl.matrVP),gl.uniformMatrix4fv(gl.getUniformLocation(this.mtl.shd.program,"MatrWVP"),!1,new Float32Array(gl.matrWVP[0].concat(gl.matrWVP[1]).concat(gl.matrWVP[2]).concat(gl.matrWVP[3]))),gl.bindVertexArray(this.vA),null==this.iBuf?gl.drawArrays(this.type,0,this.numOfElements):(gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.iBuf),gl.drawElements(this.type,this.numOfElements,gl.UNSIGNED_INT,0))}}class B extends F{constructor(){super(),this.name="Axis"}init(){this.prim=M(gl.LINES,function(t){for(let n=1;n<y.length;n++)if(y[n].name==t)return y[n];return L()}("axis-material"),[].concat(V([0,0,0],[0,0],[0,0,0],[1,0,0,1]),V([1847,0,0],[0,0],[0,0,0],[1,0,0,1]),V([0,0,0],[0,0],[0,0,0],[0,1,0,1]),V([0,1847,0],[0,0],[0,0,0],[0,1,0,1]),V([0,0,0],[0,0],[0,0,0],[0,0,1,1]),V([0,0,1847],[0,0],[0,0,0],[0,0,1,1])),[])}response(){}render(){this.prim.draw(h())}}function D(t,n){const c=String.fromCharCode(n);t.altKey,t.ctrlKey;const g=t.shiftKey;if(g&&"F"==c)return void v(i(8),i(0),a(0,1,0));let h=function(t){let n=l(t,t);return Math.pow(n,.5)}(o(gl.camAt,gl.camLoc));const m=(gl.camLoc[1]-gl.camAt[1])/h,w=Math.pow(1-m*m,.5),A=h*w,p=(gl.camLoc[2]-gl.camAt[2])/A,E=(gl.camLoc[0]-gl.camAt[0])/A;let y=e(Math.atan2(E,p)),S=e(Math.atan2(w,m));const L=.47+g,R=8+10*g;switch(c){case"Q":h+=L;break;case"E":h-=L;break;case"A":y-=R;break;case"D":y+=R;break;case"W":S+=R;break;case"S":S-=R}var T,b,x,F,P;S<.08?S=.08:S>178.9&&(S=178.9),h<.1&&(h=.1),v((T=a(0,h,0),x=function(t){const n=Math.sin(r(t)),e=Math.cos(r(t));return s(1,0,0,0,0,e,n,0,0,-n,e,0,0,0,0,1)}(S),F=d(y),P=f(gl.camAt),b=u(u(x,F),P),a(T[0]*b[0][0]+T[1]*b[1][0]+T[2]*b[2][0]+b[3][0],T[0]*b[0][1]+T[1]*b[1][1]+T[2]*b[2][1]+b[3][1],T[0]*b[0][2]+T[1]*b[1][2]+T[2]*b[2][2]+b[3][2])),gl.camAt,a(0,1,0))}class I extends F{constructor(){super(),this.name="Control"}init(){}response(){D(window.event,window.event.which)}render(){}}class W extends F{constructor(){super(),this.name="Geometry"}init(){this.tetrahedron=M(gl.TRIANGLES,L(),[].concat(V([1,1,1],[0,0],[1,1,1],[1,0,0,1]),V([-1,1,-1],[0,0],[-1,1,-1],[1,0,0,1]),V([1,-1,-1],[0,0],[1,-1,-1],[1,0,0,1]),V([-1,-1,1],[0,0],[-1,-1,1],[1,0,0,1])),[].concat([0,1,2],[2,0,3],[3,0,1],[1,2,3])),this.hexahedron=M(gl.TRIANGLES,L(),[].concat(V([-1,-1,-1],[0,0],[-1,-1,-1],[1,0,0,1]),V([-1,-1,1],[0,0],[-1,-1,1],[1,.25,0,1]),V([-1,1,-1],[0,0],[-1,1,-1],[1,.5,0,1]),V([-1,1,1],[0,0],[-1,1,1],[1,.75,0,1]),V([1,-1,-1],[0,0],[1,-1,-1],[.75,1,0,1]),V([1,-1,1],[0,0],[1,-1,1],[.5,1,0,1]),V([1,1,-1],[0,0],[1,1,-1],[.25,1,0,1]),V([1,1,1],[0,0],[1,1,1],[0,1,0,1])),[].concat([0,2,3,3,0,1],[1,5,7,7,3,1],[1,5,4,4,1,0],[0,4,6,6,0,2],[2,3,6,6,3,7],[7,6,5,5,4,6])),this.hexahedronWireframe=M(gl.LINES_STRIP,L(),[].concat(V([-1,-1,-1],[0,0],[-1,-1,-1],[1,0,0,1]),V([-1,-1,1],[0,0],[-1,-1,1],[1,.25,0,1]),V([-1,1,-1],[0,0],[-1,1,-1],[1,.5,0,1]),V([-1,1,1],[0,0],[-1,1,1],[1,.75,0,1]),V([1,-1,-1],[0,0],[1,-1,-1],[.75,1,0,1]),V([1,-1,1],[0,0],[1,-1,1],[.5,1,0,1]),V([1,1,-1],[0,0],[1,1,-1],[.25,1,0,1]),V([1,1,1],[0,0],[1,1,1],[0,1,0,1])),[].concat([0,2,3,3,0,1],[1,5,7,7,3,1],[1,5,4,4,1,0],[0,4,6,6,0,2],[2,3,6,6,3,7],[7,6,5,5,4,6])),this.octahedron=M(gl.TRIANGLES,L(),[].concat(V([0,1,0],[0,0],[0,1,0],[1,0,0,1]),V([0,0,-1],[0,0],[0,0,-1],[1,.5,0,1]),V([-1,0,0],[0,0],[-1,0,0],[1,1,0,1]),V([0,0,1],[0,0],[0,0,1],[.5,1,0,1]),V([1,0,0],[0,0],[1,0,0],[1,1,0,1]),V([0,-1,0],[0,0],[0,-1,0],[1,1,.5,1])),[].concat([1,0,2],[2,0,3],[3,0,4],[4,0,1],[1,5,4],[4,5,3],[3,5,2],[2,5,1])),this.icosahedron=M(gl.TRIANGLES,L(),[].concat(V([-1,t,0],[0,0],[-1,t,0],[1,.25,0,1]),V([0,1,-t],[0,0],[0,1,-t],[1,.5,0,1]),V([1,t,0],[0,0],[1,t,0],[1,.75,0,1]),V([0,1,t],[0,0],[0,1,t],[1,1,0,1]),V([-t,0,1],[0,0],[-t,0,1],[.75,1,0,1]),V([-t,0,-1],[0,0],[-t,0,-1],[.5,1,0,1]),V([0,-1,-t],[0,0],[0,-1,-t],[.25,1,0,1]),V([t,0,-1],[0,0],[t,0,-1],[0,1,0,1]),V([t,0,1],[0,0],[t,0,1],[0,1,.25,1]),V([0,-1,t],[0,0],[0,-1,t],[0,1,.5,1]),V([-1,-t,0],[0,0],[-1,-t,0],[0,0,.75,1]),V([1,-t,0],[0,0],[1,-t,0],[0,1,1,1])),[].concat([0,1,2],[0,2,3],[0,3,4],[0,4,5],[0,5,1],[1,6,7],[7,1,2],[2,7,8],[8,2,3],[3,8,9],[9,3,4],[4,9,10],[10,4,5],[5,10,6],[6,5,1],[7,11,8],[8,11,9],[9,11,10],[10,11,6],[6,11,7])),this.dodecahedron=M(gl.TRIANGLES,L(),[].concat(V([n,t,0],[0,0],[n,t,0],[1,0,0,1]),V([-n,t,0],[0,0],[-n,t,0],[1,0,0,1]),V([-1,1,-1],[0,0],[-1,1,-1],[1,0,0,1]),V([0,n,-t],[0,0],[0,n,-t],[1,0,0,1]),V([1,1,-1],[0,0],[1,1,-1],[1,0,0,1]),V([1,1,1],[0,0],[1,1,1],[1,1,0,1]),V([0,n,t],[0,0],[0,n,t],[1,1,0,1]),V([-1,1,1],[0,0],[-1,1,1],[1,1,0,1]),V([-t,0,n],[0,0],[-t,0,n],[1,1,0,1]),V([-t,0,-n],[0,0],[-t,0,-n],[1,1,0,1]),V([-1,-1,-1],[0,0],[-1,-1,-1],[0,1,0,1]),V([0,-n,-t],[0,0],[0,-n,-t],[0,1,0,1]),V([1,-1,-1],[0,0],[1,-1,-1],[0,1,0,1]),V([t,0,-n],[0,0],[t,0,-n],[0,1,0,1]),V([t,0,n],[0,0],[t,0,n],[0,1,0,1]),V([1,-1,1],[0,0],[1,-1,1],[0,0,1,1]),V([n,-t,0],[0,0],[n,-t,0],[0,0,1,1]),V([-n,-t,0],[0,0],[-n,-t,0],[0,0,1,1]),V([-1,-1,1],[0,0],[-1,-1,1],[0,0,1,1]),V([0,-n,t],[0,0],[0,-n,t],[0,0,1,1])),[].concat(_([0,1,2,3,4]),_([0,5,6,7,1]),_([1,7,8,9,2]),_([2,9,10,11,3]),_([3,11,12,13,4]),_([0,4,13,14,5]),_([6,5,14,15,19]),_([8,7,6,19,18]),_([18,17,10,9,8]),_([12,11,10,17,16]),_([16,17,18,19,15]),_([16,15,14,13,12])))}response(){}render(){this.tetrahedron.draw(f(a(0,3,0))),this.hexahedron.draw(f(a(0,-3,0))),this.octahedron.draw(f(a(-1.8,0,1.8))),this.icosahedron.draw(f(a(3,0,-3))),this.dodecahedron.draw(h())}}function C(){gl.clearColor(.3,.47,.8,1),gl.viewport(0,0,1920,1080),gl.clear(gl.COLOR_BUFFER_BIT),gl.matrView=m(gl.camLoc,gl.camAt,gl.camUp),gl.matrVP=u(gl.matrView,gl.matrProj),gl.lightDir=function(t,n){const e=t[0]*n[0][3]+t[1]*n[1][3]+t[2]*n[2][3]+n[3][3];return a((t[0]*n[0][0]+t[1]*n[1][0]+t[2]*n[2][0]+n[3][0])/e,(t[0]*n[0][1]+t[1]*n[1][1]+t[2]*n[2][1]+n[3][1])/e,(t[0]*n[0][2]+t[1]*n[1][2]+t[2]*n[2][2]+n[3][2])/e)}(gl.lightDir,d(1.8)),function(){for(let t=0;t<x.length;t++)x[t].response()}(),function(){for(let t=0;t<x.length;t++)x[t].render()}(),window.requestAnimationFrame(C)}window.onload=async function(){window.outSys=function(t){console.log("%c[SYS]","background:rgb(0, 0, 0); color: #00ff00",t)},window.outLog=function(t){console.log("%c[LOG]","background: #000000; color: #00ffff",t)},window.outText=function(t){console.log(" :::: "+t)};const t=new I;document.onkeydown=()=>{t.response()},window.onresize=()=>{console.log(document.documentElement.clientWidth,document.documentElement.clientHeight),b()},outLog("System start..."),window.canvas=document.getElementById("webgl-canvas"),await async function(){outSys("Render system initializing"),window.gl=canvas.getContext("webgl2",{antialias:!1}),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),gl.enable(gl.DEPTH_TEST),gl.projSize=.1,gl.projDist=gl.projSize,gl.farClip=1847,await T(),v(i(8),i(0),a(0,1,0)),b()}(),gl.lightDir=a(.8,1.02,.8),outSys("Units initializing"),P(new B),P(new W),await async function(){for(let t=0;t<x.length;t++)await x[t].init()}(),outLog("Render start..."),C()}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
