!function(){"use strict";const t=(Math.sqrt(5)+1)/2,n=(Math.sqrt(5)-1)/2;function r(t){return 180*t/Math.PI}function e(t){return t*Math.PI/180}function o(t,n,r){return[t,n,r]}function a(t){return[t,t,t]}function i(t,n){return o(t[0]-n[0],t[1]-n[1],t[2]-n[2])}function l(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function c(t,n){return o(t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0])}function s(t){let n=l(t,t);return 0==n?a(0):function(t,n){return o(t[0]/n,t[1]/n,t[2]/n)}(t,Math.pow(n,.5))}function g(t,n,r,e,o,a,i,l,c,s,g,u,m,h,f,d){return[[t,n,r,e],[o,a,i,l],[c,s,g,u],[m,h,f,d]]}function u(){return g(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)}function m(t,n){return g(t[0][0]*n[0][0]+t[0][1]*n[1][0]+t[0][2]*n[2][0]+t[0][3]*n[3][0],t[0][0]*n[0][1]+t[0][1]*n[1][1]+t[0][2]*n[2][1]+t[0][3]*n[3][1],t[0][0]*n[0][2]+t[0][1]*n[1][2]+t[0][2]*n[2][2]+t[0][3]*n[3][2],t[0][0]*n[0][3]+t[0][1]*n[1][3]+t[0][2]*n[2][3]+t[0][3]*n[3][3],t[1][0]*n[0][0]+t[1][1]*n[1][0]+t[1][2]*n[2][0]+t[1][3]*n[3][0],t[1][0]*n[0][1]+t[1][1]*n[1][1]+t[1][2]*n[2][1]+t[1][3]*n[3][1],t[1][0]*n[0][2]+t[1][1]*n[1][2]+t[1][2]*n[2][2]+t[1][3]*n[3][2],t[1][0]*n[0][3]+t[1][1]*n[1][3]+t[1][2]*n[2][3]+t[1][3]*n[3][3],t[2][0]*n[0][0]+t[2][1]*n[1][0]+t[2][2]*n[2][0]+t[2][3]*n[3][0],t[2][0]*n[0][1]+t[2][1]*n[1][1]+t[2][2]*n[2][1]+t[2][3]*n[3][1],t[2][0]*n[0][2]+t[2][1]*n[1][2]+t[2][2]*n[2][2]+t[2][3]*n[3][2],t[2][0]*n[0][3]+t[2][1]*n[1][3]+t[2][2]*n[2][3]+t[2][3]*n[3][3],t[3][0]*n[0][0]+t[3][1]*n[1][0]+t[3][2]*n[2][0]+t[3][3]*n[3][0],t[3][0]*n[0][1]+t[3][1]*n[1][1]+t[3][2]*n[2][1]+t[3][3]*n[3][1],t[3][0]*n[0][2]+t[3][1]*n[1][2]+t[3][2]*n[2][2]+t[3][3]*n[3][2],t[3][0]*n[0][3]+t[3][1]*n[1][3]+t[3][2]*n[2][3]+t[3][3]*n[3][3])}function h(t,n,r){let e=s(i(n,t)),o=s(c(e,r)),a=s(c(o,e));return g(o[0],a[0],-e[0],0,o[1],a[1],-e[1],0,o[2],a[2],-e[2],0,-l(t,o),-l(t,a),l(t,e),1)}function f(t){return g(1,0,0,0,0,1,0,0,0,0,1,0,t[0],t[1],t[2],1)}let d=[];class w{constructor(t){this.name=t,this.program=function(t){let n=gl.createProgram();const r=[["vert",gl.VERTEX_SHADER,"#version 300 es\nprecision highp float;\n#define VERTEX_SHADER 1\n"],["frag",gl.FRAGMENT_SHADER,"#version 300 es\nprecision highp float;\n#define FRAGMENT_SHADER 1\n"]];for(let o=0;o<r.length;o++){let a="bin/shaders/"+t+"/"+r[o][0]+".glsl",i="bin/shaders/default/vert.glsl"==(e=a)?"layout(location = 0) in vec3 InPosition;\n            layout(location = 1) in vec2 InTexCoord;\n            layout(location = 2) in vec3 InNormal;\n            layout(location = 3) in vec4 InColor;\n\n            out vec3 DrawPos;\n            out vec2 DrawTexCoord;\n            out vec3 DrawNormal;\n            out vec4 DrawColor;\n\n            uniform mat4 MatrWVP;\n            uniform mat4 MatrW;\n\n            void main( void ) \n            {\n              gl_Position = MatrWVP * vec4(InPosition, 1);\n              mat4 MatrWInv = inverse(transpose(MatrW));\n\n              DrawPos = (MatrW * vec4(InPosition, 1.0)).xyz;\n              DrawTexCoord = InTexCoord;\n              DrawNormal = mat3(MatrWInv) * InNormal;\n              DrawColor = vec4(InColor);\n            }":"bin/shaders/default/frag.glsl"==e?"layout(location = 0) out vec4 OutColor;\n            in vec3 DrawPos;\n            in vec2 DrawTexCoord;\n            in vec3 DrawNormal;\n            in vec4 DrawColor;\n\n            uniform vec3 CamDir;\n            \n            uniform vec3 Ka;\n            uniform vec4 KdTrans;\n            uniform vec4 KsPh;\n\n            void main()\n            {\n              float nl = max(0.30, dot(normalize(DrawNormal), -CamDir));\n\n              OutColor = vec4(DrawColor.xyz * nl, DrawColor.w);\n            }":void 0;i=r[o][2]+i;const l=gl.createShader(r[o][1]);gl.shaderSource(l,i),gl.compileShader(l),gl.getShaderParameter(l,gl.COMPILE_STATUS)?outText("Loaded shader: "+a):alert(gl.getShaderInfoLog(l)),gl.attachShader(n,l)}var e;return gl.linkProgram(n),gl.getProgramParameter(n,gl.LINK_STATUS)?outText("Created shader pack: "+t):alert("Program linkage error"),n}(t),d.push(this)}}let A=[];class v{constructor(t,n,r,e,o,a,i){this.name=t,this.ka=n,this.kd=r,this.ks=e,this.ph=o,this.trans=a,this.shd=i,A.push(this),outText("Created material: "+t)}apply(){gl.useProgram(this.shd.program),gl.uniform3fv(gl.getUniformLocation(this.shd.program,"Ka"),new Float32Array(this.ka),0,0),gl.uniform4fv(gl.getUniformLocation(this.shd.program,"KdTrans"),new Float32Array(this.kd.concat(this.trans)),0,0),gl.uniform4fv(gl.getUniformLocation(this.shd.program,"KsPh"),new Float32Array(this.ks.concat(this.trans)),0,0)}}function p(){return A[0]}function E(){outSys("Materials initializing"),new v("default",a(.1),a(.9),a(.3),30,1,d[0])}function T(){outSys("Shaders initializing"),new w("default"),E()}function S(t,n,r){gl.camLoc=t,gl.camAt=n,gl.matrView=h(t,n,r),gl.camRight=o(gl.matrView[0][0],gl.matrView[1][0],gl.matrView[2][0]),gl.camUp=o(gl.matrView[0][1],gl.matrView[1][1],gl.matrView[2][1]),gl.camDir=o(-gl.matrView[0][2],-gl.matrView[1][2],-gl.matrView[2][2])}function y(){let t,n;var r,e,o,a,i,l;t=n=gl.projSize,gl.frameW=document.documentElement.clientWidth,gl.frameH=document.documentElement.clientHeight,gl.frameW>=gl.frameH?t*=gl.frameW/gl.frameH:n*=gl.frameH/gl.frameW,gl.matrProj=(r=-t/2,e=t/2,o=-n/2,a=n/2,i=gl.projDist,l=gl.farClip,g(2*i/(e-r),0,0,0,0,2*i/(a-o),0,0,(e+r)/(e-r),(a+o)/(a-o),-(l+i)/(l-i),-1,0,0,-2*i*l/(l-i),0)),gl.matrVP=m(gl.matrView,gl.matrProj),gl.viewportWidth=gl.frameW,gl.viewportHeight=gl.frameH}const P=[];class R{constructor(){}init(){}response(){}render(){}}function L(t){outText("Unit created: "+t.name),P.push(t)}function b(t,n,r,e){return t.concat(n,r,e)}function x(t){return[].concat([t[0],t[1],t[2]],[t[2],t[0],t[3]],[t[3],t[4],t[0]])}function C(t,n,r,e){return new D(t,n,r,e)}class D{constructor(t,n,r,e){this.type=t,this.mtl=n,r.length>0&&(this.vBuf=gl.createBuffer(),this.vA=gl.createVertexArray(),gl.bindVertexArray(this.vA),gl.bindBuffer(gl.ARRAY_BUFFER,this.vBuf),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(r),gl.STATIC_DRAW),gl.bindBuffer(gl.ARRAY_BUFFER,this.vBuf),gl.enableVertexAttribArray(0),gl.enableVertexAttribArray(1),gl.enableVertexAttribArray(2),gl.enableVertexAttribArray(3),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,48,0),gl.vertexAttribPointer(1,2,gl.FLOAT,!1,48,12),gl.vertexAttribPointer(2,3,gl.FLOAT,!1,48,20),gl.vertexAttribPointer(3,4,gl.FLOAT,!1,48,32)),e.length>0?(this.iBuf=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.iBuf),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Int32Array(e),gl.STATIC_DRAW),this.numOfElements=e.length):this.numOfElements=r.length,outText("Created primitive: "+new String(4*r.length/48)+" vertices")}draw(t){this.mtl.apply(),gl.uniform3fv(gl.getUniformLocation(this.mtl.shd.program,"CamDir"),new Float32Array(gl.camDir),0,0),gl.uniformMatrix4fv(gl.getUniformLocation(this.mtl.shd.program,"MatrW"),!1,new Float32Array(t[0].concat(t[1]).concat(t[2]).concat(t[3]))),gl.matrWVP=m(t,gl.matrVP),gl.uniformMatrix4fv(gl.getUniformLocation(this.mtl.shd.program,"MatrWVP"),!1,new Float32Array(gl.matrWVP[0].concat(gl.matrWVP[1]).concat(gl.matrWVP[2]).concat(gl.matrWVP[3]))),gl.bindVertexArray(this.vA),null==this.iBuf?gl.drawArrays(this.type,0,this.numOfElements):(gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.iBuf),gl.drawElements(this.type,this.numOfElements,gl.UNSIGNED_INT,0))}}class V extends R{constructor(){super(),this.name="Axis"}init(){this.prim=C(gl.LINES,p(),[].concat(b([0,0,0],[0,0],[0,0,0],[1,0,0,1]),b([1847,0,0],[0,0],[0,0,0],[1,0,0,1]),b([0,0,0],[0,0],[0,0,0],[0,1,0,1]),b([0,1847,0],[0,0],[0,0,0],[0,1,0,1]),b([0,0,0],[0,0],[0,0,0],[0,0,1,1]),b([0,0,1847],[0,0],[0,0,0],[0,0,1,1])),[])}response(){}render(){this.prim.draw(u())}}function M(t,n){const c=String.fromCharCode(n);t.altKey,t.ctrlKey;const s=t.shiftKey;if(s&&"F"==c)return void S(a(8),a(0),o(0,1,0));let u=function(t){let n=l(t,t);return Math.pow(n,.5)}(i(gl.camAt,gl.camLoc));const h=(gl.camLoc[1]-gl.camAt[1])/u,d=Math.pow(1-h*h,.5),w=u*d,A=(gl.camLoc[2]-gl.camAt[2])/w,v=(gl.camLoc[0]-gl.camAt[0])/w;let p=r(Math.atan2(v,A)),E=r(Math.atan2(d,h));const T=.47+s,y=8+10*s;switch(c){case"Q":u+=T;break;case"E":u-=T;break;case"A":p-=y;break;case"D":p+=y;break;case"W":E+=y;break;case"S":E-=y}var P,R,L,b,x;E<.08?E=.08:E>178.9&&(E=178.9),u<.1&&(u=.1),S((P=o(0,u,0),L=function(t){const n=Math.sin(e(t)),r=Math.cos(e(t));return g(1,0,0,0,0,r,n,0,0,-n,r,0,0,0,0,1)}(E),b=function(t){const n=Math.sin(e(t)),r=Math.cos(e(t));return g(r,0,-n,0,0,1,0,0,n,-0,r,0,0,0,0,1)}(p),x=f(gl.camAt),R=m(m(L,b),x),o(P[0]*R[0][0]+P[1]*R[1][0]+P[2]*R[2][0]+R[3][0],P[0]*R[0][1]+P[1]*R[1][1]+P[2]*R[2][1]+R[3][1],P[0]*R[0][2]+P[1]*R[1][2]+P[2]*R[2][2]+R[3][2])),gl.camAt,o(0,1,0))}class F extends R{constructor(){super(),this.name="Control"}init(){}response(){M(window.event,window.event.which)}render(){}}class I extends R{constructor(){super(),this.name="Geometry"}init(){this.tetrahedron=C(gl.TRIANGLES,p(),[].concat(b([1,1,1],[0,0],[1,1,1],[1,0,0,1]),b([-1,1,-1],[0,0],[-1,1,-1],[1,0,0,1]),b([1,-1,-1],[0,0],[1,-1,-1],[1,0,0,1]),b([-1,-1,1],[0,0],[-1,-1,1],[1,0,0,1])),[].concat([0,1,2],[2,0,3],[3,0,1],[1,2,3])),this.hexahedron=C(gl.TRIANGLES,p(),[].concat(b([-1,-1,-1],[0,0],[-1,-1,-1],[1,0,0,1]),b([-1,-1,1],[0,0],[-1,-1,1],[1,.25,0,1]),b([-1,1,-1],[0,0],[-1,1,-1],[1,.5,0,1]),b([-1,1,1],[0,0],[-1,1,1],[1,.75,0,1]),b([1,-1,-1],[0,0],[1,-1,-1],[.75,1,0,1]),b([1,-1,1],[0,0],[1,-1,1],[.5,1,0,1]),b([1,1,-1],[0,0],[1,1,-1],[.25,1,0,1]),b([1,1,1],[0,0],[1,1,1],[0,1,0,1])),[].concat([0,2,3,3,0,1],[1,5,7,7,3,1],[1,5,4,4,1,0],[0,4,6,6,0,2],[2,3,6,6,3,7],[7,6,5,5,4,6])),this.octahedron=C(gl.TRIANGLES,p(),[].concat(b([0,1,0],[0,0],[0,1,0],[1,0,0,1]),b([0,0,-1],[0,0],[0,0,-1],[1,.5,0,1]),b([-1,0,0],[0,0],[-1,0,0],[1,1,0,1]),b([0,0,1],[0,0],[0,0,1],[.5,1,0,1]),b([1,0,0],[0,0],[1,0,0],[1,1,0,1]),b([0,-1,0],[0,0],[0,-1,0],[1,1,.5,1])),[].concat([1,0,2],[2,0,3],[3,0,4],[4,0,1],[1,5,4],[4,5,3],[3,5,2],[2,5,1])),this.icosahedron=C(gl.TRIANGLES,p(),[].concat(b([-1,t,0],[0,0],[-1,t,0],[1,.25,0,1]),b([0,1,-t],[0,0],[0,1,-t],[1,.5,0,1]),b([1,t,0],[0,0],[1,t,0],[1,.75,0,1]),b([0,1,t],[0,0],[0,1,t],[1,1,0,1]),b([-t,0,1],[0,0],[-t,0,1],[.75,1,0,1]),b([-t,0,-1],[0,0],[-t,0,-1],[.5,1,0,1]),b([0,-1,-t],[0,0],[0,-1,-t],[.25,1,0,1]),b([t,0,-1],[0,0],[t,0,-1],[0,1,0,1]),b([t,0,1],[0,0],[t,0,1],[0,1,.25,1]),b([0,-1,t],[0,0],[0,-1,t],[0,1,.5,1]),b([-1,-t,0],[0,0],[-1,-t,0],[0,0,.75,1]),b([1,-t,0],[0,0],[1,-t,0],[0,1,1,1])),[].concat([0,1,2],[0,2,3],[0,3,4],[0,4,5],[0,5,1],[1,6,7],[7,1,2],[2,7,8],[8,2,3],[3,8,9],[9,3,4],[4,9,10],[10,4,5],[5,10,6],[6,5,1],[7,11,8],[8,11,9],[9,11,10],[10,11,6],[6,11,7])),this.dodecahedron=C(gl.TRIANGLES,p(),[].concat(b([n,t,0],[0,0],[n,t,0],[1,0,0,1]),b([-n,t,0],[0,0],[-n,t,0],[1,0,0,1]),b([-1,1,-1],[0,0],[-1,1,-1],[1,0,0,1]),b([0,n,-t],[0,0],[0,n,-t],[1,0,0,1]),b([1,1,-1],[0,0],[1,1,-1],[1,0,0,1]),b([1,1,1],[0,0],[1,1,1],[1,1,0,1]),b([0,n,t],[0,0],[0,n,t],[1,1,0,1]),b([-1,1,1],[0,0],[-1,1,1],[1,1,0,1]),b([-t,0,n],[0,0],[-t,0,n],[1,1,0,1]),b([-t,0,-n],[0,0],[-t,0,-n],[1,1,0,1]),b([-1,-1,-1],[0,0],[-1,-1,-1],[0,1,0,1]),b([0,-n,-t],[0,0],[0,-n,-t],[0,1,0,1]),b([1,-1,-1],[0,0],[1,-1,-1],[0,1,0,1]),b([t,0,-n],[0,0],[t,0,-n],[0,1,0,1]),b([t,0,n],[0,0],[t,0,n],[0,1,0,1]),b([1,-1,1],[0,0],[1,-1,1],[0,0,1,1]),b([n,-t,0],[0,0],[n,-t,0],[0,0,1,1]),b([-n,-t,0],[0,0],[-n,-t,0],[0,0,1,1]),b([-1,-1,1],[0,0],[-1,-1,1],[0,0,1,1]),b([0,-n,t],[0,0],[0,-n,t],[0,0,1,1])),[].concat(x([0,1,2,3,4]),x([0,5,6,7,1]),x([1,7,8,9,2]),x([2,9,10,11,3]),x([3,11,12,13,4]),x([0,4,13,14,5]),x([6,5,14,15,19]),x([8,7,6,19,18]),x([18,17,10,9,8]),x([12,11,10,17,16]),x([16,17,18,19,15]),x([16,15,14,13,12])))}response(){}render(){this.tetrahedron.draw(f(o(0,3,0))),this.hexahedron.draw(f(o(0,-3,0))),this.octahedron.draw(f(o(-1.8,0,1.8))),this.icosahedron.draw(f(o(3,0,-3))),this.dodecahedron.draw(u())}}function _(){gl.clearColor(.3,.47,.8,1),gl.viewport(0,0,1920,1080),gl.clear(gl.COLOR_BUFFER_BIT),gl.matrView=h(gl.camLoc,gl.camAt,gl.camUp),gl.matrVP=m(gl.matrView,gl.matrProj),function(){for(let t=0;t<P.length;t++)P[t].response()}(),function(){for(let t=0;t<P.length;t++)P[t].render()}(),window.requestAnimationFrame(_)}window.onload=function(){window.outSys=function(t){console.log("%c[SYS]","background: #000000; color: #00ff00",t)},window.outLog=function(t){console.log("%c[LOG]","background: #000000; color: #00ffff",t)},window.outText=function(t){console.log(" :::: "+t)};const t=new F;document.onkeydown=()=>{t.response()},window.onresize=()=>{console.log(document.documentElement.clientWidth,document.documentElement.clientHeight),y()},outLog("System start..."),window.canvas=document.getElementById("webgl-canvas"),window.gl=canvas.getContext("webgl2",{antialias:!1}),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),gl.enable(gl.DEPTH_TEST),gl.projSize=.1,gl.projDist=gl.projSize,gl.farClip=1847,T(),S(a(8),a(0),o(0,1,0)),y(),outSys("Render system initialized"),L(new V),L(new I),outLog("Units initializing"),function(){for(let t=0;t<P.length;t++)P[t].init()}(),outLog("Render start..."),_()}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
