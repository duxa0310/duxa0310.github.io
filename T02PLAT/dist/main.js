!function(){"use strict";function t(t){return 180*t/Math.PI}function e(t){return t*Math.PI/180}function r(t,e,r){return[t,e,r]}function n(t){return[t,t,t]}function o(t,e){return r(t[0]-e[0],t[1]-e[1],t[2]-e[2])}function a(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function l(t,e){return r(t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0])}function i(t){let e=a(t,t);return 0==e?n(0):function(t,e){return r(t[0]/e,t[1]/e,t[2]/e)}(t,Math.pow(e,.5))}function g(t,e,r,n,o,a,l,i,g,c,u,m,s,f,d,w){return[[t,e,r,n],[o,a,l,i],[g,c,u,m],[s,f,d,w]]}function c(){return g(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)}function u(t,e){return g(t[0][0]*e[0][0]+t[0][1]*e[1][0]+t[0][2]*e[2][0]+t[0][3]*e[3][0],t[0][0]*e[0][1]+t[0][1]*e[1][1]+t[0][2]*e[2][1]+t[0][3]*e[3][1],t[0][0]*e[0][2]+t[0][1]*e[1][2]+t[0][2]*e[2][2]+t[0][3]*e[3][2],t[0][0]*e[0][3]+t[0][1]*e[1][3]+t[0][2]*e[2][3]+t[0][3]*e[3][3],t[1][0]*e[0][0]+t[1][1]*e[1][0]+t[1][2]*e[2][0]+t[1][3]*e[3][0],t[1][0]*e[0][1]+t[1][1]*e[1][1]+t[1][2]*e[2][1]+t[1][3]*e[3][1],t[1][0]*e[0][2]+t[1][1]*e[1][2]+t[1][2]*e[2][2]+t[1][3]*e[3][2],t[1][0]*e[0][3]+t[1][1]*e[1][3]+t[1][2]*e[2][3]+t[1][3]*e[3][3],t[2][0]*e[0][0]+t[2][1]*e[1][0]+t[2][2]*e[2][0]+t[2][3]*e[3][0],t[2][0]*e[0][1]+t[2][1]*e[1][1]+t[2][2]*e[2][1]+t[2][3]*e[3][1],t[2][0]*e[0][2]+t[2][1]*e[1][2]+t[2][2]*e[2][2]+t[2][3]*e[3][2],t[2][0]*e[0][3]+t[2][1]*e[1][3]+t[2][2]*e[2][3]+t[2][3]*e[3][3],t[3][0]*e[0][0]+t[3][1]*e[1][0]+t[3][2]*e[2][0]+t[3][3]*e[3][0],t[3][0]*e[0][1]+t[3][1]*e[1][1]+t[3][2]*e[2][1]+t[3][3]*e[3][1],t[3][0]*e[0][2]+t[3][1]*e[1][2]+t[3][2]*e[2][2]+t[3][3]*e[3][2],t[3][0]*e[0][3]+t[3][1]*e[1][3]+t[3][2]*e[2][3]+t[3][3]*e[3][3])}function m(t,e,r){let n=i(o(e,t)),c=i(l(n,r)),u=i(l(c,n));return g(c[0],u[0],-n[0],0,c[1],u[1],-n[1],0,c[2],u[2],-n[2],0,-a(t,c),-a(t,u),a(t,n),1)}let s=[];class f{constructor(t){this.name=t,this.program=function(t){let e=gl.createProgram();const r=[["vert",gl.VERTEX_SHADER,"#version 300 es\nprecision highp float;\n#define VERTEX_SHADER 1\n"],["frag",gl.FRAGMENT_SHADER,"#version 300 es\nprecision highp float;\n#define FRAGMENT_SHADER 1\n"]];for(let o=0;o<r.length;o++){let a="bin/shaders/"+t+"/"+r[o][0]+".glsl",l="bin/shaders/default/vert.glsl"==(n=a)?"layout(location = 0) in vec3 InPosition;\n            layout(location = 1) in vec2 InTexCoord;\n            layout(location = 2) in vec3 InNormal;\n            layout(location = 3) in vec4 InColor;\n\n            out vec3 DrawPos;\n            out vec2 DrawTexCoord;\n            out vec3 DrawNormal;\n            out vec4 DrawColor;\n\n            uniform mat4 matrWVP;\n            uniform mat4 matrW;\n\n            void main( void ) \n            {\n              gl_Position = matrWVP *  vec4(InPosition, 1);\n\n              DrawPos = (matrW * vec4(InPosition, 1)).xyz;\n              DrawTexCoord = InTexCoord;\n              DrawNormal = /* mat3(matrWInv) * */ InNormal;\n              DrawColor = vec4(InColor);\n            }":"bin/shaders/default/frag.glsl"==n?"layout(location = 0) out vec4 OutColor;\n\n            in vec3 DrawPos;\n            in vec2 DrawTexCoord;\n            in vec3 DrawNormal;\n            in vec4 DrawColor;\n\n            void main()\n            {\n              OutColor = DrawColor;\n            }":void 0;l=r[o][2]+l;const i=gl.createShader(r[o][1]);gl.shaderSource(i,l),gl.compileShader(i),gl.getShaderParameter(i,gl.COMPILE_STATUS)?outText("Loaded shader: "+a):alert(gl.getShaderInfoLog(i)),gl.attachShader(e,i)}var n;return gl.linkProgram(e),gl.getProgramParameter(e,gl.LINK_STATUS)?outText("Created shader pack: "+t):alert("Program linkage error"),e}(t),s.push(this)}}function d(){new f("default"),outSys("Shaders initialized"),outSys("Buffers initialized")}function w(t,e,n){gl.camLoc=t,gl.camAt=e,gl.matrView=m(t,e,n),gl.camRight=r(gl.matrView[0][0],gl.matrView[1][0],gl.matrView[2][0]),gl.camUp=r(gl.matrView[0][1],gl.matrView[1][1],gl.matrView[2][1]),gl.camDir=r(-gl.matrView[0][2],-gl.matrView[1][2],-gl.matrView[2][2])}function h(){let t,e;var r,n,o,a,l,i;t=e=gl.projSize,gl.frameW=document.documentElement.clientWidth,gl.frameH=document.documentElement.clientHeight,gl.frameW>=gl.frameH?t*=gl.frameW/gl.frameH:e*=gl.frameH/gl.frameW,gl.matrProj=(r=-t/2,n=t/2,o=-e/2,a=e/2,l=gl.projDist,i=gl.farClip,g(2*l/(n-r),0,0,0,0,2*l/(a-o),0,0,(n+r)/(n-r),(a+o)/(a-o),-(i+l)/(i-l),-1,0,0,-2*l*i/(i-l),0)),gl.matrVP=u(gl.matrView,gl.matrProj),gl.viewportWidth=gl.frameW,gl.viewportHeight=gl.frameH}function A(t,e,r,n){return t.concat(e,r,n)}function v(t,e,r){return new E(t,e,r)}class E{constructor(t,e,r){this.type=t,e.length>0&&(this.vBuf=gl.createBuffer(),this.vA=gl.createVertexArray(),gl.bindVertexArray(this.vA),gl.bindBuffer(gl.ARRAY_BUFFER,this.vBuf),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(e),gl.STATIC_DRAW),gl.bindBuffer(gl.ARRAY_BUFFER,this.vBuf),gl.enableVertexAttribArray(0),gl.enableVertexAttribArray(1),gl.enableVertexAttribArray(2),gl.enableVertexAttribArray(3),gl.vertexAttribPointer(0,3,gl.FLOAT,!1,48,0),gl.vertexAttribPointer(1,2,gl.FLOAT,!1,48,12),gl.vertexAttribPointer(2,3,gl.FLOAT,!1,48,20),gl.vertexAttribPointer(3,4,gl.FLOAT,!1,48,32)),r.length>0?(this.iBuf=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.iBuf),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Int32Array(r),gl.STATIC_DRAW),this.numOfElements=r.length):this.numOfElements=e.length,outText("Created primitive: "+new String(4*e.length/48)+" vertices, "+new String(r.length)+" indices")}draw(t){let e=s[0];gl.useProgram(e.program),gl.uniformMatrix4fv(gl.getUniformLocation(e.program,"matrW"),!0,new Float32Array(t[0].concat(t[1]).concat(t[2]).concat(t[3]))),gl.matrWVP=u(t,gl.matrVP),gl.uniformMatrix4fv(gl.getUniformLocation(e.program,"matrWVP"),!1,new Float32Array(gl.matrWVP[0].concat(gl.matrWVP[1]).concat(gl.matrWVP[2]).concat(gl.matrWVP[3]))),gl.bindVertexArray(this.vA),null==this.iBuf?gl.drawArrays(this.type,0,this.numOfElements):(gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.iBuf),gl.drawElements(this.type,this.numOfElements,gl.UNSIGNED_BYTE,0))}}let P,S;function R(){gl.clearColor(.3,.47,.8,1),gl.viewport(0,0,1920,1080),gl.clear(gl.COLOR_BUFFER_BIT),gl.matrView=m(gl.camLoc,gl.camAt,gl.camUp),gl.matrVP=u(gl.matrView,gl.matrProj),S.draw(c()),P.draw(c()),window.requestAnimationFrame(R)}window.onload=function(){window.outSys=function(t){console.log("%c[SYS]","background: #000000; color: #00ff00",t)},window.outLog=function(t){console.log("%c[LOG]","background: #000000; color: #00ffff",t)},window.outText=function(t){console.log(" :::: "+t)},document.onkeydown=()=>{!function(l,i){const c=String.fromCharCode(i);l.altKey,l.ctrlKey;const m=l.shiftKey;if(m&&"F"==c)return void w(n(8),n(0),r(0,1,0));let s=function(t){let e=a(t,t);return Math.pow(e,.5)}(o(gl.camAt,gl.camLoc));const f=(gl.camLoc[1]-gl.camAt[1])/s,d=Math.pow(1-f*f,.5),h=s*d,A=(gl.camLoc[2]-gl.camAt[2])/h,v=(gl.camLoc[0]-gl.camAt[0])/h;let E=t(Math.atan2(v,A)),P=t(Math.atan2(d,f));const S=.47+m,R=8+10*m;switch(c){case"Q":s+=S;break;case"E":s-=S;break;case"A":E-=R;break;case"D":E+=R;break;case"W":P+=R;break;case"S":P-=R}P<.08?P=.08:P>178.9&&(P=178.9);s<.1&&(s=.1);w((b=r(0,s,0),y=function(t){const r=Math.sin(e(t)),n=Math.cos(e(t));return g(1,0,0,0,0,n,r,0,0,-r,n,0,0,0,0,1)}(P),T=function(t){const r=Math.sin(e(t)),n=Math.cos(e(t));return g(n,0,-r,0,0,1,0,0,r,-0,n,0,0,0,0,1)}(E),L=gl.camAt,p=g(1,0,0,0,0,1,0,0,0,0,1,0,L[0],L[1],L[2],1),V=u(u(y,T),p),r(b[0]*V[0][0]+b[1]*V[1][0]+b[2]*V[2][0]+V[3][0],b[0]*V[0][1]+b[1]*V[1][1]+b[2]*V[2][1]+V[3][1],b[0]*V[0][2]+b[1]*V[1][2]+b[2]*V[2][2]+V[3][2])),gl.camAt,r(0,1,0));var b,V;var y,T,p;var L}(window.event,window.event.which)},window.onresize=()=>{console.log(document.documentElement.clientWidth,document.documentElement.clientHeight),h()},outLog("System start..."),window.canvas=document.getElementById("webgl-canvas"),window.gl=canvas.getContext("webgl2",{antialias:!1}),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),gl.projSize=.1,gl.projDist=gl.projSize,gl.farClip=1847,d(),w(n(4),n(0),r(0,1,0)),h(),outSys("Render system initialized"),P=v(gl.TRIANGLES,[].concat(A([0,1,0],[0,0],[0,0,0],[.96,.95,.41,1]),A([1,0,0],[0,0],[0,0,0],[.36,.7,.44,1]),A([0,0,1],[0,0],[0,0,0],[.78,.98,.84,1])),[]),S=v(gl.LINES,[].concat(A([0,0,0],[0,0],[0,0,1],[1,0,0,1]),A([1e3,0,0],[0,0],[0,0,1],[1,0,0,1]),A([0,0,0],[0,0],[0,0,1],[0,1,0,1]),A([0,1e3,0],[0,0],[0,0,1],[0,1,0,1]),A([0,0,0],[0,0],[0,0,1],[0,0,1,1]),A([0,0,1e3],[0,0],[0,0,1],[0,0,1,1])),[]),outLog("Render start..."),R()}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
